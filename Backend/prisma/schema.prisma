// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid()) // Unique user ID
  username         String             @unique
  name             String?
  email            String             @unique
  password         String // Hashed password
  Bio             String? // User bio or description
  Location        String? // User's location
  pfpId          String? // Profile picture ID (reference to a file storage with 10 images)
  rating           Int                @default(1500) // Rating starts at 1500 (ELO system)
  pastRatings     Int[]              @default([]) // Store past ratings for history
  contests         ContestUser[]
  submissions      Submission[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserRefreshToken UserRefreshToken[]
  Problems  ProblemUser[]
}

model UserRefreshToken {
  id           String   @id @default(uuid())
  userId       String   @unique
  refreshToken String?   @unique
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Contest {
  id                   String        @id @default(uuid())
  name                 String
  description          String?
  rules                String?
  startTime            DateTime
  rankGuessStartTime   DateTime? // Nullable for contests without a rank guess phase
  endTime              DateTime
  participants         ContestUser[]
  numberOfParticipants Int?          @default(0) // Number of participants
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  status               String        @default("Upcoming") // "Upcoming", "Ongoing", "Ended"
  isScheduled           Boolean       @default(false) // Whether the contest is scheduled
  problems            Problem[]
  submissions         Submission[]
  ProblemUsers            ProblemUser[]
}

model ProblemTags{
  id        String  @id @default(uuid())
  tag       String // e.g., "Dynamic Programming", "Graph Theory", etc.
  problems  Problem[] @relation("ProblemToTags")
}

model Problem {
  id               String       @id @default(uuid())
  contestId        String? // Nullable for problems not in contests
  title            String
  problemScore    Int?       @default(0) // Score for the problem
  description      String
  difficulty       String // "Easy", "Medium", "Hard"
  max_time_limit   Int          @default(2)
  max_memory_limit Int          @default(262144) // 256MB in kBs
  testCases        TestCase[]
  submissions      Submission[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  contest         Contest?     @relation(fields: [contestId], references: [id])
  tags              ProblemTags[] @relation("ProblemToTags")
  Problems        ProblemUser[]
  // @@index([contestId]) // Index for faster lookups

}

// stores all problems data for a particular user
model ProblemUser{
  id        String  @id @default(uuid())
  userId    String
  problemId String
  contestId String?
  score     Int? // Score awarded based on correctness
  penalty    Int? 
  isSolved Boolean? // Whether the problem was solved correctly
  solvedInContest Boolean? // Whether the problem was solved during a contest
  finishedAt DateTime? // When the user finished the problem

  user      User    @relation(fields: [userId], references: [id])
  problem   Problem @relation(fields: [problemId], references: [id])
  contest   Contest? @relation(fields: [contestId], references: [id])
  @@unique([userId, problemId])
}

model ContestUser {
  id           String @id @default(uuid())
  userId       String
  contestId    String
  rankGuess    Int? // User's guessed rank
  actualRank   Int? // Actual rank (calculated post-contest)
  ratingChange Int? // How much rating changed after the contest
  finishTime   DateTime? // When the user finished the contest
  score        Int? @default(0) // Total score in the contest
  penalty      Int? @default(0) // Penalty for wrong submissions

  user    User    @relation(fields: [userId], references: [id])
  contest Contest @relation(fields: [contestId], references: [id])

  @@unique([userId, contestId]) // Ensure no duplicate participation
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  contestId     String? // Nullable for submissions not in contests
  language      Int // "Python", "JavaScript", "C++", etc.
  code          String
  verdict       String // "Accepted", "Wrong Answer", "Time Limit Exceeded", etc.
  score         Int      @default(0) // Score awarded based on correctness
  executionTime Float? // Execution time in ms
  memoryUsage   Float? // Memory usage
  createdAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])
  contest Contest? @relation(fields: [contestId], references: [id])
}

model TestCase {
  id        String  @id @default(uuid())
  problemId String
  input     String?
  output    String?
  stdin     String?  @default("") // Only if GCS is false
  stdout    String? @default("") // Only if GCS is false
  isPublic  Boolean @default(false) // Public test cases vs. hidden ones
  isGCS    Boolean @default(false) // Whether the test case is in the GCS bucket

  problem Problem @relation(fields: [problemId], references: [id])
}
